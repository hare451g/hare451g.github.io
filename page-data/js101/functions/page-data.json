{"componentChunkName":"component---src-layouts-article-layout-jsx","path":"/js101/functions/","result":{"data":{"site":{"siteMetadata":{"longDescription":"Membahas programming, Tutorial Javascript, Software opensource, dan trend teknologi dan IT di Indonesia dengan santai"}},"markdownRemark":{"html":"<p>Fungsi <em>f</em> atau <em>f(x)</em>, (dengan symbol x sebagai argumen fungsi), merupakan kumpulan statement / code / ekspresi yang di bungkus dengan suatu nama, tujuannya adalah untuk mengerjakan suatu <em>task</em> atau tugas dengan informasi yang diberikan.</p>\n<p>Dengan adanya fungsi, memungkinkan untuk menjalankan kumpulan dari kode / statement dengan memanggil fungsinya tanpa menulis ulang kodenya dan hasilnya dapat disimpan kedalam suatu variabel, jika tidak menghasilkan atau <code class=\"language-text\">return</code> nilai, maka nilai yang akan dikembalikan adalah <code class=\"language-text\">undefined</code>. Setiap fungsi harus memiliki tanggung jawab yang berbeda dari fungsi lain. Supaya tak ada pengulangan / redudansi code yang ditulis.</p>\n<h4>Cara penulisan fungsi di javascript:</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">namaFungsi</span><span class=\"token punctuation\">(</span>argumen <span class=\"token comment\">// opsional) {</span>\n    <span class=\"token comment\">/* statement yang mau di bungkus */</span>\n    <span class=\"token keyword\">return</span> nilaiYangMauDihHasilkan<span class=\"token punctuation\">;</span> <span class=\"token comment\">// opsional</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* cara manggil */</span>\n<span class=\"token keyword\">let</span> hasil <span class=\"token operator\">=</span> <span class=\"token function\">namaFungsi</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nilai yang mau dimasuki kedalam fungsi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Definisi dan Menggunakan Fungsi</h3>\n<p>Untuk lebih jelasnya mari kita buat fungsi yang akan menghasilkan kalimat <code class=\"language-text\">hello, I&#39;m a human</code>. Ada dua cara, yaitu:</p>\n<h4>Fungsi Tanpa Return Value:</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// definisi fungsi</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// cetak teks</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, I'm a human\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Fungsi tanpa <code class=\"language-text\">return</code> langsung mencetak teks nya, karena terdapat statement <code class=\"language-text\">console.log</code> di dalam fungsi.</p>\n<h4>Fungsi Dengan Return Value:</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// definisi fungsi</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// mengembalikan nilai teks</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello, I'm a human\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// panggil fungsi greeting cetak nilai</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sementara dengan fungsi dengan <code class=\"language-text\">return</code> tidak langsung mencetak hasilnya, namun mengembalikan nilai teks <code class=\"language-text\">&quot;hello, I&#39;m a human&quot;</code> ketika pemanggilan fungsi <code class=\"language-text\">greeting()</code> terjadi.</p>\n<h3>Passing Nilai Ke dalam Fungsi</h3>\n<p>Argumen dalam fungsi dapat digunakan untuk <em>passing</em> nilai ke dalam fungsi. Anggaplah argumen ini sebagai variabel yang dapat dikenali oleh fungsi.</p>\n<p>Misal jika ingin mencetak teks <code class=\"language-text\">hello, my name is hendra, I&#39;m a human</code>, namun, nilai dari nama <code class=\"language-text\">hendra</code> ingin kita ganti jadi sadewa tanpa merubah kode, kita dapat definisikan argumen dengan nama <code class=\"language-text\">name</code> kedalam definisi fungsi.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// definisi fungsi</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// mengembalikan nilai teks</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, I'm a human</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// simpan hasil pemanggilan kedalam variabel</span>\n<span class=\"token keyword\">const</span> greetingHendra <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hendra'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> greetingSadewa <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sadewa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// cetak nilai</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greetingHendra<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greetingSadewa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>jika di run, nilai <code class=\"language-text\">greetingHendra</code> akan berisi teks <code class=\"language-text\">hello, my name is hendra, I&#39;m a human</code>, dan <code class=\"language-text\">greetingSadewa</code> akan berisi teks <code class=\"language-text\">hello, my name is sadewa, I&#39;m a human</code>.</p>\n<h4>Q1: apa yang terjadi bila fungsi dipanggil tanpa memberikan nilai kedalam argumen ?</h4>\n<p>jika fungsi <code class=\"language-text\">greeting(name)</code> dari contoh diatas kita panggil tanpa argumen, akan menghasilkan nilai <code class=\"language-text\">hello, my name is undefined, I&#39;m a human</code>. Karena nilai name akan bernilai <code class=\"language-text\">undefined</code> karena tak ada nilai yang di pass saat pemanggilan fungsi.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// hello, my name is undefined, I'm a human</span></code></pre></div>\n<h4>Multiple Argument</h4>\n<p>Definisi fungsi dapat mendukung multiple argumen dengan cara memberikan comma (,) pada setiap argumen, untuk jelasnya mari kita buat program untuk cetak <code class=\"language-text\">hello, my name is han-tyumi, I&#39;m a cyborg</code>. Dengan ketentuan nilai nama <code class=\"language-text\">han-tyumi</code> dan spesies <code class=\"language-text\">cyborg</code> dapat diubah sesuai dengan argumen-nya.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// definisi fungsi</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> species</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// mengembalikan nilai teks</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, I'm a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>species<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cyborg <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'han-tyumi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cyborg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'appolo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> unknown <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> penguin <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'penguin?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tooMuch <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'too'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'much'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'argument'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cyborg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unknown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>penguin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tooMuch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Output yang akan dihasilkan dari program di atas adalah:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">hello, my name is han-tyumi, I&#39;m a cyborg\nhello, my name is appolo, I&#39;m a cat\nhello, my name is undefined, I&#39;m a undefined\nhello, my name is penguin?, I&#39;m a undefined\nhello, my name is too, I&#39;m a much</code></pre></div>\n<p>Seperti array, argumen akan di lihat dari posisinya, jika hanya di provide satu nilai saja seperti pada <code class=\"language-text\">penguin</code>, argumen setelahnya akan <code class=\"language-text\">undefined</code>, sementara jika tak diberikan sama sekali seperti di <code class=\"language-text\">unknown</code> akan bernilai undefined, terakhir jika argumen melebihi dari di definisikan fungsi, maka akan diabaikan seperti pada <code class=\"language-text\">tooMuch</code>.</p>\n<h4>Q2: Bisa ga si dikasih default value gitu di argumennya bang?</h4>\n<p>bisa banget, caranya gini:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'anon'</span><span class=\"token punctuation\">,</span> species <span class=\"token operator\">=</span> <span class=\"token string\">'unknown'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// mengembalikan nilai teks</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, I'm a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>species<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> unknown <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> penguin <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token string\">'penguin?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unknown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>penguin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Dengan definisi <code class=\"language-text\">name = &#39;anon&#39;</code> dan <code class=\"language-text\">species = &#39;unknown&#39;</code> nilai dari pemangillan <code class=\"language-text\">greeting()</code> akan menghasilkan teks <code class=\"language-text\">hello, my name is anon, I&#39;m a unknown</code>, sedangkan <code class=\"language-text\">penguin</code> akan menghasilkan <code class=\"language-text\">hello, my name is penguin?, I&#39;m a unknown</code>.</p>\n<h4>Object as a argument</h4>\n<p>Dalam js, ada cara yang cukup unik untuk definisikan argumen dalam fungsi, yaitu mendifinisikannya sebagai object. Mari kita coba ubah function <code class=\"language-text\">greeting</code> agar menggunakan object <code class=\"language-text\">{ name, species }</code> sebagai argumen.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// definisi fungsi</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'anon'</span><span class=\"token punctuation\">,</span> species <span class=\"token operator\">=</span> <span class=\"token string\">'unknown'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// mengembalikan nilai teks</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, I'm a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>species<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> cyborg <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'han-tyumi'</span><span class=\"token punctuation\">,</span> species<span class=\"token operator\">:</span> <span class=\"token string\">'cyborg'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> author <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> species<span class=\"token operator\">:</span> <span class=\"token string\">'human'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'hendra'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> penguin <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'penguin?'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> anon <span class=\"token operator\">=</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cyborg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>penguin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>anon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Program diatas akan menghasilkan:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">hello, my name is han-tyumi, I&#39;m a cyborg\nhello, my name is hendra, I&#39;m a human\nhello, my name is penguin?, I&#39;m a unknown\nhello, my name is anon, I&#39;m a unknown</code></pre></div>\n<p>Pattern ini cukup enak untuk dibaca, karena pada saat memanggil fungsi kita tahu nilai apa yang akan dipassing ke dalam fungsi melalui 'key' dari object, karena menggunakan key, urutan dari argumen pun tidak berpengaruh. seperti contoh pada <code class=\"language-text\">author</code> key <code class=\"language-text\">species</code> dan <code class=\"language-text\">name</code> urutannya terbalik namun tetap menghasilkan nilai <code class=\"language-text\">hello, my name is hendra, I&#39;m a human</code>.</p>\n<p>Perlu diperhatikan pada saat mengisi nilai <code class=\"language-text\">anon</code> function <code class=\"language-text\">greeting</code> dipanggil dengan menyertakan object kosong <code class=\"language-text\">{}</code>, jika tidak program akan error karena tidak dapat destructure nilai dari variabel / argumen yang di passing kedalam fungsi. Walaupun berbentuk <code class=\"language-text\">{ name, species}</code> argumen fungsi <code class=\"language-text\">greeting</code> tetap hanya memiliki 1 buah argumen, hanya saja argumen tersebut di destructure menjadi <code class=\"language-text\">{name, species}</code>.</p>\n<h3>Return values</h3>\n<p>Nilai yang dikembalikan oleh fungsi dapat berupa tipe data primitive ataupun non-primitves, untuk non-primitives kita dapat melakukan destructure agar lebih mudah dalam assignment variabel.</p>\n<p>contoh:</p>\n<p>Menghitung luas dan keliling persegi.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">luasPersegi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">panjang<span class=\"token punctuation\">,</span> lebar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> panjang <span class=\"token operator\">*</span> lebar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">kelilingPersegi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">panjang<span class=\"token punctuation\">,</span> lebar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>panjang <span class=\"token operator\">+</span> lebar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hitungPersegi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">panjang<span class=\"token punctuation\">,</span> lebar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> luas <span class=\"token operator\">=</span> <span class=\"token function\">luasPersegi</span><span class=\"token punctuation\">(</span>panjang<span class=\"token punctuation\">,</span> lebar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> keliling <span class=\"token operator\">=</span> <span class=\"token function\">kelilingPersegi</span><span class=\"token punctuation\">(</span>panjang<span class=\"token punctuation\">,</span> lebar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>luas<span class=\"token punctuation\">,</span> keliling<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> persegi <span class=\"token operator\">=</span> <span class=\"token function\">hitungPersegi</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'luas persegi adalah'</span><span class=\"token punctuation\">,</span> persegi<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keliling persegi adalah'</span><span class=\"token punctuation\">,</span> persegi<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jika di perhatikan, variabel yang di cetak dalam <code class=\"language-text\">console.log</code> kurang dapat di mengerti dalam sekali baca karena hanya mengacu pada index dari persegi saja. Untuk memudahkan kita dapat mengubahnya menjadi</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">luasPersegi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">panjang<span class=\"token punctuation\">,</span> lebar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> panjang <span class=\"token operator\">*</span> lebar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">kelilingPersegi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">panjang<span class=\"token punctuation\">,</span> lebar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>panjang <span class=\"token operator\">+</span> lebar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hitungPersegi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">panjang<span class=\"token punctuation\">,</span> lebar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> luas <span class=\"token operator\">=</span> <span class=\"token function\">luasPersegi</span><span class=\"token punctuation\">(</span>panjang<span class=\"token punctuation\">,</span> lebar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> keliling <span class=\"token operator\">=</span> <span class=\"token function\">kelilingPersegi</span><span class=\"token punctuation\">(</span>panjang<span class=\"token punctuation\">,</span> lebar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>luas<span class=\"token punctuation\">,</span> keliling<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>luas<span class=\"token punctuation\">,</span> keliling<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">hitungPersegi</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'luas persegi adalah'</span><span class=\"token punctuation\">,</span> luas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keliling persegi adalah'</span><span class=\"token punctuation\">,</span> keliling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sifat destructure ini berlaku juga bila return value dari hitung persegi adalah object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">luasPersegi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">panjang<span class=\"token punctuation\">,</span> lebar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> panjang <span class=\"token operator\">*</span> lebar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">kelilingPersegi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">panjang<span class=\"token punctuation\">,</span> lebar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>panjang <span class=\"token operator\">+</span> lebar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hitungPersegi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">panjang<span class=\"token punctuation\">,</span> lebar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> luas <span class=\"token operator\">=</span> <span class=\"token function\">luasPersegi</span><span class=\"token punctuation\">(</span>panjang<span class=\"token punctuation\">,</span> lebar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> keliling <span class=\"token operator\">=</span> <span class=\"token function\">kelilingPersegi</span><span class=\"token punctuation\">(</span>panjang<span class=\"token punctuation\">,</span> lebar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> luas<span class=\"token punctuation\">,</span> keliling <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> luas<span class=\"token punctuation\">,</span> keliling <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">hitungPersegi</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'luas persegi adalah'</span><span class=\"token punctuation\">,</span> luas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keliling persegi adalah'</span><span class=\"token punctuation\">,</span> keliling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ketiga potongan program tersebut akan menghasilkan output yang sama, yaitu:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">luas persegi adalah 20\nkeliling persegi adalah 18</code></pre></div>\n<p>*catatan: untuk perihal destructuring object, dapat dibaca dalam artikel <a href=\"/js101/operators/1-assignment-operators/\">assignment operators</a>.</p>\n<p>Okay sepertinya sudah cukup untuk intro kedalam fungsi dalam javascript, masih banyak lagi hal yang akan di bahas namun akan panjang sekali bila jadi satu artikel. <del>alesan padahal mah udah pusing mau bahas apa lagi</del> , jadi gue tutup dulu sampai sini ya, see ya later.</p>\n<p>Cheers 🥂</p>","id":"611f40c9-9b42-5918-8bd5-cb0a4cc228f0","fields":{"slug":"/js101/functions/"},"frontmatter":{"title":"Fungsi di Javascript","date":"2020-04-18T00:00:00.000Z","description":"Salah satu elemen penting di js, fungsi, mengapa penting? Baca aja yuk. biar traffic situs gue naik.","heroImage":"https://images.unsplash.com/photo-1555949963-aa79dcee981c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80","series":"js101","photographer":"Shahadat Rahman","unsplashAccount":"hishahadat"}}},"pageContext":{"slug":"/js101/functions/"}}}