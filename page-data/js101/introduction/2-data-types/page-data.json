{"componentChunkName":"component---src-layouts-article-layout-jsx","path":"/js101/introduction/2-data-types/","result":{"data":{"site":{"siteMetadata":{"longDescription":"Membahas programming, Tutorial Javascript, Software opensource, dan trend teknologi dan IT di Indonesia dengan santai"}},"markdownRemark":{"html":"<p>Javascript bersifat <em>Dynamic Type</em> yang artinya tipe data yang di assign kedalam suatu variabel dapat berubah, beda dengan java atau c yang besifat <em>Static Type</em> yang tipe datanya tak bisa dirubah dan harus menentukan tipe data ketika kita (HAH~?! Kita?) mendeklarasikan suatu variabel. Terkadang hal ini akan membingungkan bagi orang yang awal nya sudah pernah belajar bahasa Java / C / Pascal.</p>\n<p><em>Jika kalian nyaman dengan static typing, javascript juga memiliki subset bahasa yang bersifat static typing, yaitu <a href=\"https://www.typescriptlang.org/\">TypeScript</a>.</em></p>\n<h2>Mengapa JavaScript besifat Dynamic Typing?</h2>\n<p>Karena variabel dalam javascript hanya merujuk pada suatu nilai primitif.</p>\n<p>Misal dalam Java ketika variabel yang telah dideklarasikan dengan tipe data integer, di assign dengan nilai dengan tipe data string, maka nilai tersebut akan ditolak dan java akan menyatakan error.</p>\n<p>Contoh:</p>\n<p>Misal nilai variabel <code class=\"language-text\">a</code> adalah bilangan bulat (integer) 100;</p>\n<p>Dengan menggunakan Java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Dengan menggunakan JavaScript</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Terlihat dalam java variabel a telah ditentukan untuk memiliki nilai integer dengan adanya keyword <code class=\"language-text\">int</code> sebelum nama dari variabelnya, berbeda dengan javascript yang hanya menggunakan keyword <code class=\"language-text\">var</code> yang menandakan scope atau jangkauan dari variabel saja.</p>\n<p>Variabel dalam javascript dapat dianggap sebagai relasi. Dari contoh sebelumnya variabel <code class=\"language-text\">a</code> merujuk ke nilai <code class=\"language-text\">100</code>, dan nilai <code class=\"language-text\">100</code> tersebut dapat disebut dengan nilai primitif dalam JavaScript. Sehingga tak ada keterikatan antara tipe data dan nilai yang akan di assign.</p>\n<h2>Primitif</h2>\n<p>Sebelumnya dijelaskan bahwa variabel dalam javascript merujuk ke nilai (value) atau primitif, nah yang disebut primitif ini adalah nilai yang tak memiliki atribut, method, dan bersifat <code class=\"language-text\">read-only</code>, jadi nilainya tidak dapat diubah (<em>immutable</em>), hanya bisa di assign dengan nilai primitif lain.</p>\n<p>Berikut beberapa primitif yang ada di JavaScript:</p>\n<ul>\n<li><code class=\"language-text\">boolean</code> : berisi nilai antara <code class=\"language-text\">true</code> atau <code class=\"language-text\">false</code></li>\n<li><code class=\"language-text\">number</code> : bilangan dari -(2<sup>53</sup> − 1) sampai 2<sup>53</sup> − 1</li>\n<li><code class=\"language-text\">bigint</code> : bilangan lebih dari <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">nilai bilangan maksimal yang telah ditentukan oleh javacript</a>.</li>\n<li><code class=\"language-text\">string</code> : berisikan satu atau kumpulan dari karakter.</li>\n<li><code class=\"language-text\">null</code> : menandakan data atau variabel bernilai kosong atau <code class=\"language-text\">null</code>.</li>\n<li><code class=\"language-text\">undefined</code>: variabel belum memiliki definisi.</li>\n</ul>\n<h3>Primitif besifat Immutable</h3>\n<p>Untuk membuktikan bahwa primitif bersifat <em>immutable</em> atau tak dapat diubah, kita gunakan contoh program ini:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Hendra Sadewa'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nname<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'Firman Hendrad'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Code diatas akan menghasilkan output seperti ini:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Hendra Sadewa\nHendra Sadewa\nFirman Hendrad\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Hendra'</span>, <span class=\"token string\">'Annisa'</span>, <span class=\"token string\">'Firman'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"Sadewa\"</span>, <span class=\"token string\">\"Annisa\"</span>, <span class=\"token string\">\"Firman\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Terlihat bila nilai primitive tak dapat diubah dengan perintah <code class=\"language-text\">name[0] = &#39;R&#39;;</code> yang tujuannya adalah untuk mengubah karakter pertama dari string <code class=\"language-text\">Hendra Sadewa</code> yang disimpan dalam variabel <code class=\"language-text\">name</code>. Namun Primitive dapat direplace nilainya dengan nilai baru, hal ini dapat dibuktikan dengan perintah <code class=\"language-text\">name = &#39;Firman Hendrad&#39;;</code> yang menghasilkan teks <code class=\"language-text\">Firman Hendrad</code> ketika variabel <code class=\"language-text\">name</code> dicetak dengan <code class=\"language-text\">console.log</code>.</p>\n<h3>Primitif dapat dibandingkan nilainya</h3>\n<p>Karena menyimpan suatu nilai, primitif dapat di bandingkan nilainya yang akan menghasilkan nilai boolean.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> employee1Age <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> employee2Age <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> isSame <span class=\"token operator\">=</span> employee1Age <span class=\"token operator\">===</span> employee2Age<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isSame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>potongan program diatas kan menghasilkan output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token boolean\">true</span></code></pre></div>\n<p>Menyatakan bila nilai dari variable <code class=\"language-text\">isSame</code> yang bernilai perbandingan antara <code class=\"language-text\">employee1Age</code> dan <code class=\"language-text\">employee2Age</code> adalah sama atau bernilai <code class=\"language-text\">true</code>.</p>\n<h2>Non-Primitif</h2>\n<p>Nilai yang disimpan oleh variabel yang non-primitif adalah referensi dari suatu object. Nilai non-primitif dapat diubah nilainya, dan nilai nya tak dapat dibandingkan (compare).</p>\n<p>Berikut tipe data non-primitif yang umum digunakan di javascript:</p>\n<ul>\n<li><code class=\"language-text\">Array</code>: kumpulan atau list dari beberapa nilai yang dapat diakses oleh indeksnya.</li>\n<li><code class=\"language-text\">Object</code>: nilai yang berisi pasangan dari key dan value dapat diakses oleh key nya.</li>\n</ul>\n<h3>Non-Primitif dapat diubah nilainya</h3>\n<p>Untuk membahas mutability dalam non-primitif mari kita check potongan kode dibawah ini:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hendra'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Annisa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Firman'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nnames<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Sadewa'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> employee <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Yudi'</span><span class=\"token punctuation\">,</span>\n  position<span class=\"token operator\">:</span> <span class=\"token string\">'Front End Engineer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nemployee<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token string\">'Fullstack Engineer'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pada tipe non-primitive seperti Array, nilai nya dapat diubah seperti perintah <code class=\"language-text\">names[0] = &#39;Sadewa&#39;;</code> yang akan mengganti nilai pertama atau index pertama dari array <code class=\"language-text\">names</code> dengan teks <code class=\"language-text\">Sadewa</code>, dan nilai atribut <code class=\"language-text\">position</code> didalam object <code class=\"language-text\">employee</code> dapat diganti juga melalui perintah <code class=\"language-text\">employee.position = &#39;Fullstack Engineer&#39;;</code>.</p>\n<h3>Non-Primitif tak bisa dibandingkan nilainya</h3>\n<p>Karena non-primitif menyimpan referensi dari objek, nilainya tak dapat dibandingkan. Mari check code dibawah ini:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> employee1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Yudi'</span><span class=\"token punctuation\">,</span>\n  position<span class=\"token operator\">:</span> <span class=\"token string\">'Front End Engineer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> employee2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Yudi'</span><span class=\"token punctuation\">,</span>\n  position<span class=\"token operator\">:</span> <span class=\"token string\">'Front End Engineer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> isEmployeeSame <span class=\"token operator\">=</span> employee1 <span class=\"token operator\">===</span> employee2<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isEmployeeSame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> isNamePositionSame <span class=\"token operator\">=</span> employee1<span class=\"token punctuation\">.</span>position <span class=\"token operator\">===</span> employee2<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isNamePositionSame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> alicePets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'turtle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> alisonPets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'turtle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> isTheirPetsSame <span class=\"token operator\">=</span> alicePets <span class=\"token operator\">===</span> alisonPets<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isTheirPetsSame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> amandaPets <span class=\"token operator\">=</span> alisonPets<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isAmandaPetsSame <span class=\"token operator\">=</span> amandaPets <span class=\"token operator\">===</span> alisonPets<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>isAmandaPetsSame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token boolean\">false</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token boolean\">false</span>\n<span class=\"token boolean\">true</span></code></pre></div>\n<p>Terbukti bahwa:</p>\n<ol>\n<li>Nilai dari variabel non primitif yaitu employee1 dan employee2 tak dapat dibandingkan walaupun objeknya sama persis, nilai yang dihasilkan dari komparasi <code class=\"language-text\">const isEmployeeSame = employee1 === employee2;</code> adalah <code class=\"language-text\">false</code>.</li>\n<li>Sedangkan nilai attribut object employee yang bernilai primitif dapat dibandingkan yaitu attribut position yang ada di kedua object dengan menggunakan perintah <code class=\"language-text\">const isNamePositionSame = employee1.position === employee2.position;</code> yang akan menghasilkan <code class=\"language-text\">true</code> karena nilainya sama.</li>\n<li>Begitu pula dengan Array, hasil dari perbandingan <code class=\"language-text\">alicePets === alisonPets;</code> akan menghasilkan `false, walaupun isi dari keuda variabel itu sama persis.</li>\n<li>Variabel non primitif dapat di compare melalui refensi nya, dibuktikan dari nilai <code class=\"language-text\">amandaPets</code> yang di assign dengan variabel <code class=\"language-text\">alisonPets</code>, ketika dibandingkan kedua variabel tersebut <code class=\"language-text\">amandaPets === alisonPets;</code> hasilnya adalah <code class=\"language-text\">true</code>.</li>\n</ol>\n<p>Sampai disini dulu pembahasan mengenai data types yang ada dalam javascript, untuk detailnya akan dibahas dilain artikel, semoga bermanfaat.</p>\n<p>Cheers 🥂</p>","id":"51cb2dae-f6a2-5278-8b2f-19f61dbb6c05","fields":{"slug":"/js101/introduction/2-data-types/"},"frontmatter":{"title":"Tipe data dan primitives di Javascript","date":"2020-03-21T00:00:00.000Z","description":"Mencoba memahami tipe data yang ada di dalam javascript beserta cara menggunakan variabel.","heroImage":"https://images.unsplash.com/photo-1416339134316-0e91dc9ded92?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1267&q=80","series":"js101","photographer":"Jeff Sheldon","unsplashAccount":"ugmonk"}}},"pageContext":{"slug":"/js101/introduction/2-data-types/"}}}