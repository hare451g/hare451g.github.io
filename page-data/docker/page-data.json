{"componentChunkName":"component---src-layouts-article-layout-jsx","path":"/docker/","result":{"data":{"site":{"siteMetadata":{"longDescription":"Membahas programming, Tutorial Javascript, Software opensource, dan trend teknologi dan IT di Indonesia dengan santai"}},"markdownRemark":{"html":"<p>Bagi web developer serta pengguna OS berbasis Linux seperti Ubuntu, sering kali mendapatkan tugas untuk 'deploy' website ke beberapa remote VM (Virtual Machine) atau VPS. Namun beberapa kali gue mendapatkan kesulitan untuk menyamakan config di VPS/VM dengan laptop yang digunakan untuk develop website.</p>\n<p>Misal, jika ada project untuk membuat Website dengan spesifikasi server tujuan menggunakan CentOS, RDBMS Postgres, dan php7, sementara laptop yang digunakan untuk develop website adalah Ubuntu 18.04 tanpa terinstall Postgres dan php7 akan sangat <del>malas</del> makan waktu untuk melakukan konfigurasi environment development dengan environment server tujuan. Mau tidak mau di local harus install php7 dan posgres, belum lagi cara installasi kedua apps berbeda yang local pakai apt dan server pakai dnf, repot sekali.</p>\n<p><a href=\"https://docker.com\">Docker</a> merupakan salah satu solusi tepat untuk kasus tersebut, karena docker memiliki kemampuan untuk membuat 'Container' yang dapat di config menyerupai VPS/VM server, tanpa harus mengganggu environment yang ada di lokal. Konfigurasi mulai dari OS yang dipakai, aplikasi apa saja yang harus di install dalam image tersebut dapat dikemas dalam bentuk <code class=\"language-text\">Dockerfile</code> yang ditulis dengan gaya bahasa <code class=\"language-text\">yaml</code>.</p>\n<p>Nah, cukup dulu bahas dockernya, mari kita lanjut ke cara installasi docker di ubuntu 18.04:</p>\n<ol>\n<li>pastikan apt repository di update dulu</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</code></pre></div>\n<ol start=\"2\">\n<li>install beberapa packages agar memungkinkan apt menggunakan package di HTTPS</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> apt-transport-https ca-certificates <span class=\"token function\">curl</span> software-properties-common</code></pre></div>\n<ol start=\"3\">\n<li>lalu tambahkan official <a href=\"https://gnupg.org/\">GPG key</a> milik docker dengan perintah:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -</code></pre></div>\n<ol start=\"4\">\n<li>lanjut daftarkan repo docker kedalam repo apt lokal</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> add-apt-repository <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\"</span></code></pre></div>\n<ol start=\"5\">\n<li>sebenarnya ubuntu sudah auto update repositori ketika kita tambahkan dengan perintah <code class=\"language-text\">add-apt-repository</code> (hah?! kita?), tapi pastikan lagi saja dengan jalankan perintah update:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</code></pre></div>\n<ol start=\"6\">\n<li>nah sekarang check apakah docker sudah ada di dalam repositori apt lokal:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt-cache</span> policy docker-ce</code></pre></div>\n<p>kalau sudah ada, biasanya akan ada output seperti ini:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-ce:\n  Installed: <span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span>\n  Candidate: <span class=\"token number\">18.03</span>.1~ce~3-0~ubuntu\n  Version table:\n     <span class=\"token number\">18.03</span>.1~ce~3-0~ubuntu <span class=\"token number\">500</span>\n        <span class=\"token number\">500</span> https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages</code></pre></div>\n<ol start=\"7\">\n<li>jika tak ada masalah, lanjut install docker dengan perintah apt</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-ce</code></pre></div>\n<ol start=\"8\">\n<li>periksa apakah docker sudah dapat di running dengan perintah</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status docker</code></pre></div>\n<p>ketika dijalankan akan ada output seperti ini:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">● docker.service - Docker Application Container Engine\n   Loaded: loaded <span class=\"token punctuation\">(</span>/lib/systemd/system/docker.service<span class=\"token punctuation\">;</span> enabled<span class=\"token punctuation\">;</span> vendor preset: enabled<span class=\"token punctuation\">)</span>\n   Active: active <span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span> since Sat <span class=\"token number\">2020</span>-03-21 <span class=\"token number\">11</span>:25:06 WIB<span class=\"token punctuation\">;</span> 3h 52min ago\n     Docs: https://docs.docker.com\n Main PID: <span class=\"token number\">1568</span> <span class=\"token punctuation\">(</span>dockerd<span class=\"token punctuation\">)</span>\n    Tasks: <span class=\"token number\">14</span>\n   Memory: <span class=\"token number\">126</span>.1M\n   CGroup: /system.slice/docker.service\n           └─1568 /usr/bin/dockerd -H fd:// --containerd<span class=\"token operator\">=</span>/run/containerd/containerd.sock</code></pre></div>\n<ol start=\"9\">\n<li>terakhir coba jalankan perintah <code class=\"language-text\">docker</code> untuk memastikan docker benar-benar dapat digunakan:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker</code></pre></div>\n<p>akan muncul output manual dari docker seperti ini:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Usage:\tdocker <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> COMMAND\n\nA self-sufficient runtime <span class=\"token keyword\">for</span> containers\n\nOptions:\n      --config string      Location of client config files <span class=\"token punctuation\">(</span>default <span class=\"token string\">\"/home/hare/.docker\"</span><span class=\"token punctuation\">)</span>\n  -c, --context string     Name of the context to use to connect to the daemon <span class=\"token punctuation\">(</span>overrides DOCKER_HOST <span class=\"token function\">env</span> var and default context <span class=\"token builtin class-name\">set</span> with <span class=\"token string\">\"docker context use\"</span><span class=\"token punctuation\">)</span>\n  -D, --debug              Enable debug mode\n  -H, --host list          Daemon socket<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> to connect to\n  -l, --log-level string   Set the logging level <span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"info\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"warn\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"error\"</span><span class=\"token operator\">|</span><span class=\"token string\">\"fatal\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>default <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span>\n      --tls                Use TLS<span class=\"token punctuation\">;</span> implied by --tlsverify\n      --tlscacert string   Trust certs signed only by this CA <span class=\"token punctuation\">(</span>default <span class=\"token string\">\"/home/hare/.docker/ca.pem\"</span><span class=\"token punctuation\">)</span>\n      --tlscert string     Path to TLS certificate <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>default <span class=\"token string\">\"/home/hare/.docker/cert.pem\"</span><span class=\"token punctuation\">)</span>\n      --tlskey string      Path to TLS key <span class=\"token function\">file</span> <span class=\"token punctuation\">(</span>default <span class=\"token string\">\"/home/hare/.docker/key.pem\"</span><span class=\"token punctuation\">)</span>\n      --tlsverify          Use TLS and verify the remote\n  -v, --version            Print version information and quit</code></pre></div>\n<p>*jika tidak bisa running, dan muncul error <code class=\"language-text\">ERR PERMISSION DENIED</code>, gunakan sudo untuk menjalankan docker:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> docker</code></pre></div>\n<p>Sekarang docker sudah terinstall, sekarang tinggal explore lebih dalam tentang docker di <a href=\"https://docs.docker.com/\">dokumentasi offical docker</a> dan bisa juga explore container apa saja yang dapat di install atau di download ke local di <a href=\"https://hub.docker.com/\">docker hub</a>.</p>\n<p>Semoga bermanfaat, cheers 🥂</p>","id":"4a4ef350-53bd-53da-b7d8-8a99e77ed5e4","fields":{"slug":"/docker/"},"frontmatter":{"title":"Install Docker di Ubuntu 18.04 LTS","date":"2020-03-21T00:00:00.000Z","description":"Cara install Docker di ubuntu 18.04 dengan mudah melalui beberapa perintah sederhana.","heroImage":"https://media.giphy.com/media/jYjA6fHBfAZvq/giphy.gif","series":"docker","photographer":null,"unsplashAccount":null}}},"pageContext":{"slug":"/docker/"}}}