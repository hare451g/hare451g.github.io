{"version":3,"sources":["webpack:///./src/constants/formats.js","webpack:///./src/components/ArticleCard.jsx","webpack:///./src/components/ArticleListWithTitle.jsx","webpack:///./src/hooks/useSiteMetadata.js","webpack:///./src/components/TabItem.jsx","webpack:///./src/components/ArticleSeriesTab.jsx","webpack:///./src/components/ArticlesBySeasons.jsx","webpack:///./src/utils/blogEntries.js","webpack:///./src/hooks/useAllBlogEntriesQuery.js","webpack:///./src/pages/blog.jsx"],"names":["formats","FRONT_MATTER_DATE","ARTICLE_TIMESTAMP","WORK_EXPERIENCE_DATE","ArticleCard","id","slug","heroImage","title","date","description","datePublished","moment","format","to","style","textDecoration","key","flexDirection","mb","variant","justifyContent","bg","py","px","alignItems","fontFamily","color","fontWeight","fontSize","sx","backgroundImage","backgroundSize","borderTopRightRadius","borderBottomRightRadius","minHeight","minWidth","ArticleListWithTitle","articles","list","map","article","pb","useSiteMetadata","site","siteMetadata","TabItem","index","selectedTab","onTabClick","item","onClick","cursor","ArticleSeriesTab","serie","seasons","useState","setTab","filteredArticleList","filter","entries","selected","ArticlesBySeasons","seriesBySeasons","width","m","textAlign","textTransform","mapSeriesBySeason","series","Set","node","frontmatter","season","sort","current","next","seasonTitle","createFilteredSeasonsSet","fields","episode","latest","length","sortByLatest","isAfter","isBefore","useAllBlogEntriesQuery","allMarkdownRemark","edges","availableSeries","distinct","groupBySeason","BlogPage","longDescription","siteLogo","useLocalImage","HomeLayout","SEO","image","publicURL"],"mappings":"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","file":"component---src-pages-blog-jsx-3e2cbb302bb2441e1e5e.js","sourcesContent":["const formats = {\n  FRONT_MATTER_DATE: 'YYYY-MM-DD',\n  ARTICLE_TIMESTAMP: 'dddd, DD/MM/YYYY',\n  WORK_EXPERIENCE_DATE: 'MMM YYYY',\n};\n\nexport default formats;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { Box, Flex, Text } from 'rebass';\nimport moment from 'moment';\nimport { GrCalendar } from 'react-icons/gr';\n\n// constants\nimport formats from '../constants/formats';\n\nfunction ArticleCard({ id, slug, heroImage, title, date, description }) {\n  const datePublished = moment(date).format(formats.ARTICLE_TIMESTAMP);\n\n  return (\n    <Link to={slug} style={{ textDecoration: 'none' }} key={id}>\n      <Flex\n        flexDirection=\"row\"\n        mb={4}\n        variant=\"articleCard\"\n        justifyContent=\"space-between\"\n        bg=\"background\"\n      >\n        <Flex\n          flexDirection=\"column\"\n          py={1}\n          px={2}\n          justifyContent=\"space-between\"\n          alignItems=\"flex-start\"\n        >\n          <Flex flexDirection=\"column\" py={2}>\n            <Text\n              fontFamily=\"heading\"\n              color=\"text\"\n              fontWeight=\"heading\"\n              fontSize={[1, 2, 3]}\n            >\n              {title}\n            </Text>\n            <Text fontFamily=\"body\" color=\"text\" py={3} fontSize={[1, 2, 2]}>\n              {description}\n            </Text>\n          </Flex>\n          <Text fontFamily=\"body\" color=\"text\" fontSize={[1, 2, 1]}>\n            <GrCalendar /> {datePublished}\n          </Text>\n        </Flex>\n        <Box\n          sx={{\n            backgroundImage: `url(${heroImage})`,\n            backgroundSize: 'cover',\n            borderTopRightRadius: 8,\n            borderBottomRightRadius: 8,\n            minHeight: [120, 180],\n            minWidth: [120, 240],\n          }}\n        />\n      </Flex>\n    </Link>\n  );\n}\n\nexport default ArticleCard;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { Text, Box } from 'rebass';\n\n// components\nimport ArticleCard from './ArticleCard';\n\nfunction ArticleListWithTitle({ title, list }) {\n  // render list of recent articles\n  const articles = list.map(article => (\n    <ArticleCard {...article} key={article.id} />\n  ));\n\n  return (\n    <>\n      <Box>\n        <Text fontWeight=\"heading\" fontFamily=\"heading\" fontSize={4} pb={3}>\n          {title}\n        </Text>\n      </Box>\n      {articles}\n    </>\n  );\n}\n\nexport default ArticleListWithTitle;\n","import { useStaticQuery, graphql } from 'gatsby';\n\nfunction useSiteMetadata() {\n  const {\n    site: { siteMetadata },\n  } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            longDescription\n            author\n            authorShortIntro\n            twitter\n            instagram\n            linkedIn\n            linkedInURL\n            twitterURL\n            instagramURL\n            email\n            siteUrl\n          }\n        }\n      }\n    `\n  );\n\n  return siteMetadata;\n}\n\nexport default useSiteMetadata;\n","import React from 'react';\nimport { Text, Box } from 'rebass';\n\nfunction TabItem({ list, index, selectedTab, onTabClick }) {\n  return list.map(item => (\n    <Box\n      key={`${selectedTab}-${item[index]}`}\n      variant={item[index] === selectedTab && 'activeTab'}\n    >\n      <Text\n        onClick={() => onTabClick(item[index])}\n        fontFamily=\"heading\"\n        sx={{\n          cursor: 'pointer',\n        }}\n      >\n        {item[index]}\n      </Text>\n    </Box>\n  ));\n}\n\nexport default TabItem;\n","import React, { useState } from 'react';\nimport { Text, Box, Flex } from 'rebass';\n\nimport ArticleListWithTitle from './ArticleListWithTitle';\n\n// components\nimport TabItem from './TabItem';\n\nfunction ArticleSeriesTab({ serie, seasons }) {\n  const [selectedTab, setTab] = useState(seasons[0].title);\n  const filteredArticleList = seasons\n    .filter(({ title }) => title === selectedTab)\n    .map(({ title, entries }) => (\n      <ArticleListWithTitle\n        title={``}\n        list={entries}\n        key={`season-${serie}-${title}`}\n      />\n    ));\n\n  return (\n    <Box>\n      <Flex justifyContent=\"space-evenly\">\n        <TabItem\n          list={seasons}\n          index=\"title\"\n          selectedTab={selectedTab}\n          onTabClick={selected => setTab(selected)}\n        />\n      </Flex>\n      {filteredArticleList}\n    </Box>\n  );\n}\n\nexport default ArticleSeriesTab;\n","import React from 'react';\nimport { Box, Flex, Text } from 'rebass';\n\n// components\nimport ArticleSeriesTab from './ArticleSeriesTab';\n\nfunction ArticlesBySeasons({ seriesBySeasons = [] }) {\n  return seriesBySeasons.map(({ serie, seasons }) => (\n    <Flex\n      width={['100%', '100%', 720]}\n      m=\"auto\"\n      flexDirection=\"column\"\n      key={`serie-${serie}`}\n    >\n      <Text\n        fontFamily=\"heading\"\n        fontSize={[4, 5, 6]}\n        textAlign=\"center\"\n        px={[1, 1, 5]}\n        pb={4}\n        fontWeight=\"heading\"\n        sx={{ textTransform: 'uppercase' }}\n      >\n        {serie}\n      </Text>\n      <Box mb={5}>\n        <ArticleSeriesTab serie={serie} seasons={seasons} />\n      </Box>\n    </Flex>\n  ));\n}\n\nexport default ArticlesBySeasons;\n","import moment from 'moment';\n\nfunction createFilteredSeasonsSet(series) {\n  return [\n    ...new Set(\n      series.entries\n        // filter only articles with season\n        .filter(({ node }) => node.frontmatter.season !== null)\n        // sort by season id\n        .sort((current, next) =>\n          current.node.frontmatter < next.node.frontmatter ? 1 : -1\n        )\n        // transform to return season title only\n        .map(({ node }) => node.frontmatter.seasonTitle)\n    ),\n  ];\n}\n\nfunction mapSeriesBySeason(series) {\n  const filteredSeasons = createFilteredSeasonsSet(series);\n\n  // group by season\n  const seasons = filteredSeasons.map(season => ({\n    title: season,\n    entries: series.entries\n      // filter season not null and having same season\n      .filter(\n        ({ node }) =>\n          node.frontmatter.seasonTitle !== null &&\n          node.frontmatter.seasonTitle === season\n      )\n      // transform to articles to get id, slug and frontmatter\n      .map(({ node: { id, frontmatter, fields: { slug } } }) => ({\n        id,\n        slug,\n        ...frontmatter,\n      }))\n      // sort the entries by episodes\n      .sort((current, next) => (current.episode > next.episode ? 1 : -1)),\n  }));\n\n  return {\n    serie: series.serie,\n    seasons,\n    latest:\n      series.entries.length > 0\n        ? series.entries[0].node.frontmatter.date\n        : null,\n  };\n}\n\nfunction sortByLatest(current, next) {\n  if (moment(current.latest).isAfter(next.latest)) {\n    return -1;\n  }\n  if (moment(current.latest).isBefore(next.latest)) {\n    return 1;\n  }\n  return 0;\n}\n\nexport { mapSeriesBySeason, sortByLatest };\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { mapSeriesBySeason, sortByLatest } from '../utils/blogEntries';\n\nfunction useAllBlogEntriesQuery() {\n  const {\n    allMarkdownRemark,\n    allMarkdownRemark: { edges: entries, distinct: availableSeries },\n  } = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(\n          sort: { order: DESC, fields: frontmatter___date }\n          filter: {\n            frontmatter: { isPublished: { eq: true } }\n            fields: { isFuture: { eq: false } }\n          }\n        ) {\n          distinct(field: frontmatter___series)\n          edges {\n            node {\n              id\n              excerpt\n              frontmatter {\n                title\n                date\n                heroImage\n                description\n                series\n                seasonTitle\n                season\n                episode\n                isPublished\n              }\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const groupBySeason = () =>\n    availableSeries\n      .map(serie => ({\n        serie,\n        entries: entries.filter(\n          ({ node: { frontmatter } }) => frontmatter.series === serie\n        ),\n      }))\n      .map(mapSeriesBySeason)\n      .sort(sortByLatest);\n\n  return { allMarkdownRemark, groupBySeason };\n}\n\nexport default useAllBlogEntriesQuery;\n","import React from 'react';\n\n// components\nimport SEO from '../components/SEO';\nimport ArticlesBySeasons from '../components/ArticlesBySeasons';\n\n// layout\nimport HomeLayout from '../layouts/HomeLayout';\n\n// hooks\nimport useSiteMetadata from '../hooks/useSiteMetadata';\nimport useLocalImage from '../hooks/useLocalImage';\nimport useAllBlogEntriesQuery from '../hooks/useAllBlogEntriesQuery';\n\nfunction BlogPage() {\n  const { description, longDescription } = useSiteMetadata();\n  const { siteLogo } = useLocalImage();\n  const { groupBySeason } = useAllBlogEntriesQuery();\n  const seriesBySeasons = groupBySeason();\n\n  return (\n    <HomeLayout>\n      <SEO\n        title=\"Developer Blog\"\n        description={`${description} | ${longDescription}`}\n        image={siteLogo.publicURL}\n      />\n      <ArticlesBySeasons seriesBySeasons={seriesBySeasons} />\n    </HomeLayout>\n  );\n}\n\nexport default BlogPage;\n"],"sourceRoot":""}